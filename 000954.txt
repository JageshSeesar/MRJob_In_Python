Question 1

from mrjob.job import MRJob
from mrjob.step import MRStep
import csv

cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(',')

class ChemicalMax(MRJob):

 def mapper(self, _, line):
 	# Convert each line into a dictionary
 	row = dict(zip(cols, [a.strip()
 	  for a in csv.reader([line]).__next__()]))

 	if row['location'] and row['new_cases']:
 	  yield row['location'], int(row['new_cases'])

 def combine(self, key, values):
	yield (key, max(values))

 def reducer_count_death(self, key, values):
 	# send all (num_occurrences, word) pairs to the same reducer.
 	# num_occurrences is so we can easily use Python's max() function.
	yield None, (max(values), key)

 def reducer_max_death(self, _, key_values_pairs):
 	# each item of word_count_pairs is calculated (count, word),
 	# so yielding one results in key=counts, value=word
 	try:
 	    yield max(key_values_pairs)
 	except ValueError:
 	    pass

 def steps(self):
   return [
     MRStep(mapper=self.mapper,
        combiner=self.combine,
        reducer=self.reducer_count_death),
     MRStep(reducer=self.reducer_max_death)
    ]

if __name__ == '__main__':
  ChemicalMax.run()
_____________________________________________________________________________________
Question 2

from mrjob.job import MRJob
from mrjob.step import MRStep
import csv

cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(',')

class ChemicalMin(MRJob):
 def mapper(self, _, line):
 	# Convert each line into a dictionary
 	row = dict(zip(cols, [a.strip()
 	  for a in csv.reader([line]).__next__()]))

 	if row['location'] and row['new_cases']:
 	  yield row['location'], int(row['new_cases'])

 def combine(self, key, values):
	yield (key, min(values))

 def reducer_count_death(self, key, values):
 	# send all (num_occurrences, word) pairs to the same reducer.
 	# num_occurrences is so we can easily use Python's min() function.
	yield None, (min(values), key)

 def reducer_min_chemical(self, _, key_values_pairs):
 	# each item of word_count_pairs is calculated (count, word),
 	# so yielding one results in key=counts, value=word
 	try:
 	    yield min(key_values_pairs)
 	except ValueError:
 	    pass

 def steps(self):
   return [
     MRStep(mapper=self.mapper,
        combiner=self.combine,
        reducer=self.reducer_count_death),
     MRStep(reducer=self.reducer_min_chemical)
    ]

if __name__ == '__main__':
  ChemicalMin.run()
_____________________________________________________________________________________
Question 3

from mrjob.job import MRJob
from mrjob.step import MRStep
import csv

cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(',')

class MostCase(MRJob):
 
 def mapper(self, _, line):
   # Convert each line into a dictionary
   row = dict(zip(cols, [a.strip()
         for a in csv.reader([line]).__next__()]))
 
  if row['date'] and row['new_deaths'] and row['location']:
    #take date and location as key and new cases as value
    yield (row['date'], row['location']), int(row['new_cases'])
 
 def reducer_count_death(self, key, values):
    # send all (num_occurrences, word) pairs to the same reducer.
     # num_occurrences is so we can easily use Python's max() function.
   yield None, ('%04d'%int(sum(values)), key)
 
 def secondreducer(self,key,values):
   self.alist = []
   for value in values:
     self.alist.append(value)
   self.blist = []
   for i in range(5):			# top 5 chemical ingredients
     self.blist.append(max(self.alist))
     self.alist.remove(max(self.alist))
   for i in range(5):			# top 5 chemical ingredients
     yield self.blist[i]

 def steps(self):
   return [
     MRStep(mapper=self.mapper,
       #combiner=self.combine,
       reducer=self.reducer_count_death),
     MRStep(reducer=self.secondreducer)
     ]

if __name__ == '__main__':
 MostCase.run()
__________________________________________________________________
Question 4

from mrjob.job import MRJob
from mrjob.step import MRStep
import csv

cols = 'iso_code,continent,location,date,total_cases,new_cases,total_deaths,new_deaths'.split(',')

class ProductMin(MRJob):
 def mapper(self, _, line):
 	# Convert each line into a dictionary
 	row = dict(zip(cols, [a.strip()
 	  for a in csv.reader([line]).__next__()]))

 	if row['location'] and row['new_cases']:
 	  yield row['location'], int(row['new_cases'])

 def combine(self, key, values):
	yield (key, min(values))

 def reducer_count_death(self, key, values):
 	# send all (num_occurrences, word) pairs to the same reducer.
 	# num_occurrences is so we can easily use Python's min() function.
	yield None, (min(values), key)

 def reducer_min_product(self, _, key_values_pairs):
 	# each item of word_count_pairs is calculated (count, word),
 	# so yielding one results in key=counts, value=word
 	try:
 	    yield min(key_values_pairs)
 	except ValueError:
 	    pass

 def steps(self):
   return [
     MRStep(mapper=self.mapper,
        combiner=self.combine,
        reducer=self.reducer_count_death),
     MRStep(reducer=self.reducer_min_product)
    ]

if __name__ == '__main__':
  ProductMin.run()

